---
layout: default
title:  "Chapter 5 - The Mutation"
date:   2022-07-05 00:00:00 0000
categories: guide
---

{% include previous-link.markdown %}

```
üìù As an app user, I want to create a new user, so that that new engineers are available to host All Hands.
```

So far we're only fetching data through graphql queries, but this user story will require a mutation. Mutations are used to create, update, and destroy records and in this chapter we'll create our first mutation class.

Let's remind ourselves of the available generators by using the `--help` flag.

`Terminal` (output omitted)

```bash
$ bin/rails g --help
```

Let's use the `graphql:mutation_create` generator.

`Terminal`

```bash
$ bin/rails g graphql:mutation_create User
      create  app/graphql/mutations/user_create.rb
```

You'll see that the generator modified `app/graphql/types/mutation_type.rb` and created `app/graphql/mutations/user_create.rb`. Looking at our new mutation class, we can see that most of the work happens in the `resolve` method. If the new user fails to save, we raise a `GraphQL::ExecutionError` error. If the new user saves just fine, we return a response with the `user` field set. The mutation is nearly complete and we got it for free, but let's add our own flavor to it. We can make error handling more generic, like we did in Chapter 4, and replace the existing lines with a single `create!` call. We also see a new input type, `Types::UserInputType`, that we'll need to generate.

Let's clean up `app/graphql/types/mutation_type.rb` a little.

`app/graphql/types/mutation_type.rb`

```ruby
module Types
  class MutationType < Types::BaseObject
    field :user_create, mutation: Mutations::UserCreate
  end
end
```

Let's make our changes to `app/graphql/mutations/user_create.rb` as well.

`app/graphql/mutations/user_create.rb`

```ruby
module Mutations
  class UserCreate < BaseMutation
    description "Creates a new user"

    field :user, Types::UserType, null: false

    argument :user_input, Types::UserInputType, required: true

    def resolve(user_input:)
      user = User.create!(**user_input)
      { user: user }
    end
  end
end
```

Let's add some global error handling.

`app/graphql/all_hands_schema.rb` (lines omitted)

```ruby
class AllHandsSchema < GraphQL::Schema
  # ...

  rescue_from(ActiveRecord::RecordInvalid) do |err, obj, args, ctx, field|
    raise GraphQL::ExecutionError.new(
      "#{err.record.class.name} invalid",
      extensions: err.record.errors.to_hash,
    )
  end

  # ...
end
```

Let's generate the input type.

`Terminal`

```bash
$ bin/rails g graphql:input User
      create  app/graphql/types/user_input_type.rb
```

We can see that our new class picked up all `User` attributes, but we only intend to accept `name` and `email`. We also intend to require `name` and `email`.

Let's make those changes.

`app/graphql/types/user_input_type.rb`

```ruby
module Types
  class UserInputType < Types::BaseInputObject
    argument :name, String, required: true
    argument :email, String, required: true
  end
end
```

Let's generate a test for our mutation.

`Terminal`

```bash
$ bin/rails g integration_test types/mutation_type/user_create
      invoke  test_unit
      create    test/integration/types/mutation_type/user_create_test.rb
```

Let's fill in the generated test.

`test/integration/types/mutation_type/user_create_test.rb`

```ruby
require "test_helper"

class Types::MutationType::UserCreateTest < ActionDispatch::IntegrationTest
  setup do
    @query = <<~GRAPHQL
      mutation UserCreate($name: String!, $email: String!) {
        userCreate(input: {
          userInput: {
            name: $name
            email: $email
          }
        }) {
          user {
            id
            name
            email
            createdAt
            updatedAt
          }
        }
      }
    GRAPHQL
  end

  test "user_create" do
    variables = {
      name: "Test User",
      email: "test@hipcamp.com",
    }

    post graphql_path, params: { query: @query, variables: variables }

    user = User.last

    assert_equal(
      {
        "data" => {
          "userCreate" => {
            "user" => {
              "id" => user.id.to_s,
              "name" => user.name,
              "email" => user.email,
              "createdAt" => user.created_at.iso8601,
              "updatedAt" => user.updated_at.iso8601,
            },
          },
        },
      },
      @response.parsed_body
    )

    assert_equal(user.name, "Test User")
    assert_equal(user.email, "test@hipcamp.com")
  end

  test "user_create with errors" do
    variables = {
      name: "Test User",
      email: users(:daniel).email,
    }

    post graphql_path, params: { query: @query, variables: variables }

    assert_equal(
      {
        "data" => {
          "userCreate" => nil,
        },
        "errors" => [
          {
            "message" => "User invalid",
            "locations" => [{ "line" => 2, "column" => 3 }],
            "path" => ["userCreate"],
            "extensions" => { "email" => ["has already been taken"] },
          },
        ],
      },
      @response.parsed_body
    )
  end
end
```

These tests should look similar to the last set we wrote, with a few exceptions. Here we're performing a mutation instead of a query and the error case is different, but quite familiar.

Let's run our new tests.

`Terminal`

```bash
$ bin/rails t test/integration/types/mutation_type/user_create_test.rb
Running 2 tests in a single process (parallelization threshold is 50)
Run options: --seed 41325

# Running:

..

Finished in 0.126581s, 15.8002 runs/s, 31.6003 assertions/s.
2 runs, 4 assertions, 0 failures, 0 errors, 0 skip
```

Let's also make sure we don't have any regressions by running all of our tests.

`Terminal` (output omitted)

```bash
$ bin/rails t
```

Success!

```
‚úÖ Make a commit
```

```
‚úÖ As an app user, I want to create a new user, so that that new engineers are available to host All Hands.
```

{% include next-link.markdown %}
