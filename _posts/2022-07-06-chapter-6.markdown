---
layout: default
title:  "Chapter 6 - The Round"
date:   2022-07-06 00:00:00 0000
categories: guide
---

{% include previous-link.markdown %}

```
📝 As an app user, I want to see all rounds and selections, so that I can see selection history.
```

To get started, we'll need "round" and "selection" concepts. There's a few things to keep in mind as we architect the models. We want selections to be completely random. We should not select users twice in a row. Similarly, we should exhaust the list of available users before choosing a user again. If I were a new engineer, I wouldn't want to host right away, so let's prevent new engineers from being selected for the current round. The general approach will be: start a round, select engineers to host until we've exhausted the list of available engineers, then start a new round. We'll only select from engineers that were created before the round was created. We have our existing users table. We'll need `rounds` and `selections` tables. `selections` will join `users` with `rounds`. When we create the `Round` model, we won't need any fields besides the ID and timestamps. That's perfectly okay.

Generate a `Round` model.

`Terminal`

```bash
$ bin/rails g model round
      invoke  active_record
      create    db/migrate/20220725234357_create_rounds.rb
      create    app/models/round.rb
      invoke    test_unit
      create      test/models/round_test.rb
      create      test/fixtures/rounds.yml
```

Run the migration.

`Terminal`

```bash
$ bin/rails db:migrate
== 20220725234357 CreateRounds: migrating =====================================
-- create_table(:rounds)
   -> 0.0118s
== 20220725234357 CreateRounds: migrated (0.0119s) ============================
```

Generate a `Selection` model.

`Terminal`

```bash
$ bin/rails g model selection round:belongs_to user:belongs_to
      invoke  active_record
      create    db/migrate/20220725234614_create_selections.rb
      create    app/models/selection.rb
      invoke    test_unit
      create      test/models/selection_test.rb
      create      test/fixtures/selections.yml
```

This time we're going to make some very specific changes to the generated migration. We won't allow adding users to a round more than once. To enforce this at the database level, we'll add a [multicolumn index](https://www.postgresql.org/docs/current/indexes-multicolumn.html) on `round_id` and `user_id` with a uniqueness constraint. Since the database will be able to use this index for queries using just the leftmost column of our index, `round_id`, another index on `round_id` would be redundant. We'll actually tell Rails not to create one by using `index: false`.

Make those changes.

`db/migrate/[timestamp]_create_selections.rb`

```ruby
class CreateSelections < ActiveRecord::Migration[7.0]
  def change
    create_table :selections do |t|
      t.belongs_to :round, null: false, foreign_key: true, index: false
      t.belongs_to :user, null: false, foreign_key: true

      t.timestamps
      t.index [:round_id, :user_id], unique: true
    end
  end
end
```

Run the migration.

`Terminal`

```bash
$ bin/rails db:migrate
== 20220725234614 CreateSelections: migrating =================================
-- create_table(:selections)
   -> 0.0144s
== 20220725234614 CreateSelections: migrated (0.0144s) ========================
```

Check the changes to `db/schema.rb` to make sure things worked as expected. Just like with `User`, we now want to add in validations to `Selection` to match our database constraints. Our required validation can be summed up as "validate that the user is unique to the round." Unlike with `User`, we won't need presence validations for `round` and `user` since `belongs_to` will handle those for us.

Add the validation.

`app/models/selection.rb`

```ruby
class Selection < ApplicationRecord
  belongs_to :round
  belongs_to :user

  validates :user_id, uniqueness: { scope: :round_id }
end
```

Rails has generated some fixtures for us but the defaults won't quite work.

Improve `Round` fixture names.

`test/fixtures/rounds.yml`

```yaml
full: {}

empty: {}
```

Make sure the `Selection` fixtures match.

`test/fixtures/selections.yml`

```yaml
full_chantel:
  round: full
  user: chantel

full_sarah:
  round: full
  user: sarah

full_daniel:
  round: full
  user: daniel

full_adrian:
  round: full
  user: adrian
```

We still need a few tests. My personal approach is to open the app file and the test file side by side to make sure I cover everything.

Write tests for the `Selection` model.

`test/models/selection_test.rb`

```ruby
require "test_helper"

class SelectionTest < ActiveSupport::TestCase
  context "associations" do
    should belong_to(:round)
    should belong_to(:user)
  end

  context "validations" do
    should validate_uniqueness_of(:user_id).scoped_to(:round_id)
  end
end
```

Run the new tests.

`Terminal`

```bash
$ bin/rails t test/models/selection_test.rb
Running 3 tests in a single process (parallelization threshold is 50)
Run options: --seed 26292

# Running:

...

Finished in 0.082903s, 36.1869 runs/s, 36.1869 assertions/s.
3 runs, 3 assertions, 0 failures, 0 errors, 0 skips
```

Check for regressions by running all tests.

`Terminal` (output omitted)

```bash
$ bin/rails t                                                 
```

Success!

```
✅ Make a commit
```

{% include next-link.markdown %}
