---
layout: default
title:  "Chapter 14 - The Goodbye"
date:   2022-07-14 00:00:00 0000
categories: guide
---

{% include previous-link.markdown %}

> 📝 As an app user, I want to archive a user, so that they are removed from the selection process.

We're finally ready to give clients the ability to modify a user's archived status. We already know exactly what we'll need.

Generate a new mutation.

`Terminal`

```bash
$ bin/rails g graphql:mutation UserArchive
      create  app/graphql/mutations/user_archive.rb
```

Sort the mutations.

`app/graphql/types/mutation_type.rb`

```ruby
module Types
  class MutationType < Types::BaseObject
    field :round_create, mutation: Mutations::RoundCreate
    field :selection_create, mutation: Mutations::SelectionCreate
    field :selection_delete, mutation: Mutations::SelectionDelete
    field :user_archive, mutation: Mutations::UserArchive
    field :user_create, mutation: Mutations::UserCreate
  end
end
```

Since we used a more generic generator, we'll have to fill in a lot more by hand this time. Luckily we have plenty of examples to draw from.

Fill in the new mutation.

`app/graphql/mutations/user_archive.rb`

```ruby
module Mutations
  class UserArchive < BaseMutation
    description "Archives or unarchives a user by ID"

    field :user, Types::UserType, null: false

    argument :id, ID, required: true

    def resolve(id:)
      user = User.find(id)
      user.toggle!(:archived)
      { user: user }
    end
  end
end
```

Generate a test for the mutation.

`Terminal`

```bash
$ bin/rails g integration_test types/mutation_type/user_archive
      invoke  test_unit
      create    test/integration/types/mutation_type/user_archive_test.rb
```

Fill in the generated test.

`test/integration/types/mutation_type/user_archive_test.rb`

```ruby
require "test_helper"

class Types::MutationType::UserArchiveTest < ActionDispatch::IntegrationTest
  setup do
    @query = <<~GRAPHQL
      mutation UserArchive($id: ID!) {
        userArchive(input: { id: $id }) {
          user {
            id
            name
            email
            createdAt
            updatedAt
            archived
          }
        }
      }
    GRAPHQL
  end

  test "user_archive" do
    user = users(:daniel)
    variables = { id: user.id }

    assert_changes -> { user.archived }, from: false, to: true do
      post graphql_path, params: { query: @query, variables: variables }

      user.reload

      assert_equal(
        {
          "data" => {
            "userArchive" => {
              "user" => {
                "id" => user.id.to_s,
                "name" => user.name,
                "email" => user.email,
                "createdAt" => user.created_at.iso8601,
                "updatedAt" => user.updated_at.iso8601,
                "archived" => user.archived,
              },
            },
          },
        },
        @response.parsed_body
      )
    end
  end

  test "user_archive when archived" do
    user = users(:casper)
    variables = { id: user.id }

    assert_changes -> { user.archived }, from: true, to: false do
      post graphql_path, params: { query: @query, variables: variables }

      user.reload

      assert_equal(
        {
          "data" => {
            "userArchive" => {
              "user" => {
                "id" => user.id.to_s,
                "name" => user.name,
                "email" => user.email,
                "createdAt" => user.created_at.iso8601,
                "updatedAt" => user.updated_at.iso8601,
                "archived" => user.archived,
              },
            },
          },
        },
        @response.parsed_body
      )
    end
  end
end
```

Run the test.

`Terminal`

```bash
$ bin/rails t test/integration/types/mutation_type/user_archive_test.rb
Running 2 tests in a single process (parallelization threshold is 50)
Run options: --seed 19867

# Running:

..

Finished in 0.134561s, 14.8631 runs/s, 59.4526 assertions/s.
2 runs, 8 assertions, 0 failures, 0 errors, 0 skips
```

Check for regressions by running all tests.

`Terminal` (output omitted)

```bash
$ bin/rails t
```

Success!

```
✅ Make a commit
```

> ✅ As an app user, I want to archive a user, so that they are removed from the selection process.

{% include next-link.markdown %}
