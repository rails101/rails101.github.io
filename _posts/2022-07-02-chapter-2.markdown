---
layout: default
title:  "Chapter 2 - The User"
date:   2022-07-02 00:00:00 0000
categories: guide
---

{% include previous-link.markdown %}

The first thing you'll notice about this guide is that I'll take your through [vertical slices](https://en.wikipedia.org/wiki/Vertical_slice) of the application. It's my preferred approach and I think it works well with Rails especially. This means that, in contrast to documentation, some areas of the application will be split between chapters. In other words, don't expect to build every model right now. To start off, we'll build a `User` model with `name` and `email` attributes. We'll offload as much work as possible to the generator.

Check out documentation for the `generate model` command.

`Terminal` (output omitted)

```bash
$ bin/rails generate model
```

Skim through the output to see the available options.

Generate a `User` model.

`Terminal`

```bash
$ bin/rails generate model user name:string email:string:uniq
      invoke  active_record
      create    db/migrate/20220724210619_create_users.rb
      create    app/models/user.rb
      invoke    test_unit
      create      test/models/user_test.rb
      create      test/fixtures/users.yml
```

Take a look at what was generated for you. We're off to a great start just by leveraging the magic of Rails, but we want to make some changes of our own. First we'll check the migration. We're creating the `users` table with `name` and `email` fields. We're also adding a unique index on `email`. There are two benefits to this index. First, it ensures that two users can't be created with the same email. Second, it can speed up queries that search and filter by email.

We'll still need to make a few changes. First, we'll add not-null constraints to `name` and `email`. There's no need for either field to ever be null. The same goes for many fields. If nullable columns are common among your tables, I would think about your design. Second, since emails are case insensitive, our index will need to reflect that. In PostgreSQL, the default [collation](https://www.postgresql.org/docs/current/collation.html) will be case-sensitive. This means that `daniel@example.com` and `DANIEL@example.com` are considered two different emails. To fix this problem, we'll use an [expression index](https://www.postgresql.org/docs/current/indexes-expressional.html) to lower case email data in the index.

Make those changes.

`db/migrate/[timestamp]_create_users.rb`

```ruby
class CreateUsers < ActiveRecord::Migration[7.0]
  def change
    create_table :users do |t|
      t.string :name, null: false
      t.string :email, null: false

      t.timestamps
    end
    add_index :users, "lower(email)", unique: true
  end
end
```

Run the migration.

`Terminal`

```bash
$ bin/rails db:migrate
== 20220724210619 CreateUsers: migrating ======================================
-- create_table(:users)
   -> 0.0058s
-- add_index(:users, "lower(email)", {:unique=>true})
   -> 0.0016s
== 20220724210619 CreateUsers: migrated (0.0074s) =============================
```

You'll notice that it automatically updates `db/schema.rb`. Now that we've handled our database, we want to enforce the same constraints in our application code. We want to enforce it in the `User` model, to be exact. The way we do this is with model validations. We want to validate that both `name` and `email` are present. We also want to validate that `email` is unique among all users.

Add the validations.

`app/models/user.rb`

```ruby
class User < ApplicationRecord
  validates :name, :email, presence: true
  validates :email, uniqueness: { case_sensitive: false }
end
```

Rails also generated some fixtures for you. Fixtures offer a way to seed your database with sample data. Fixtures are loaded automatically in the test environment and can be loaded in development as well, using `bin/rails db:fixtures:load`. An alternative to fixtures, that you might see, are factories.

Add some custom fixtures.

`test/fixtures/users.yml`

```yaml
sarah:
  name: Sarah Fleming
  email: sarah@example.com

chantel:
  name: Chantel Miller
  email: chantel@example.com

adrian:
  name: Adrian Lee
  email: adrian@example.com

daniel:
  name: Daniel Bryant
  email: daniel@example.com
```

Before we write tests, one addition to our Gemfile will be invaluable. That addition will be the [shoulda](https://github.com/thoughtbot/shoulda) gem. We can follow the [installation steps](https://github.com/thoughtbot/shoulda-matchers#minitest) to get set up.

Add `shoulda` to the `Gemfile`.

`Gemfile` (lines omitted)

```ruby
group :test do
  gem 'shoulda', '~4.0'
end
```

Make sure to install the new gem.

`Terminal` (output omitted)

```bash
$ bundle install
```

Add the configuration.

`test/test_helper.rb` (lines omitted)

```ruby
Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :minitest
    with.library :rails
  end
end
```

We're ready to test! We want to write tests for the constraints and validations that we've added. Fortunately [shoulda-context](https://github.com/thoughtbot/shoulda-context) and [shoulda-matchers](https://github.com/thoughtbot/shoulda-matchers) make testing validations really easy.

Write a test for every validation in the model.

`test/models/user_test.rb`

```ruby
require "test_helper"

class UserTest < ActiveSupport::TestCase
  context "validations" do
    should validate_presence_of(:name)
    should validate_presence_of(:email)
    should validate_uniqueness_of(:email).case_insensitive
  end
end
```

Run the tests.

`Terminal`

```bash
$ bin/rails t
Running 3 tests in a single process (parallelization threshold is 50)
Run options: --seed 26441

# Running:

...

Finished in 0.042887s, 69.9513 runs/s, 69.9513 assertions/s.
3 runs, 3 assertions, 0 failures, 0 errors, 0 skips
```

Success!

```
âœ… Make a commit
```

{% include next-link.markdown %}
